import telebot
from telebot import types
from database import get_demo
from controllers import main_menu, handle_homework, handle_schedule
from models import get_subjects


def handle_add(bot, message):
    try:
        subjects = get_subjects()
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        for subject in subjects:
            keyboard.add(types.KeyboardButton(subject))
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç:", reply_markup=keyboard)
        bot.register_next_step_handler(message, process_subject, bot)
    except Exception as e:
        bot.send_message(message.chat.id, f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏: {e}')


def process_subject(message, bot):
    try:
        subject = message.text.strip()
        if subject not in get_subjects():
            bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=main_menu())
            return
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ:", reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(message, process_task, bot, subject)
    except Exception as e:
        bot.send_message(message.chat.id, f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –ø—Ä–µ–¥–º–µ—Ç–∞: {e}')


def process_task(message, bot, subject):
    try:
        task = message.text.strip()
        from database import save_homework
        save_homework(subject, task)
        bot.send_message(message.chat.id, f'–ó–∞–¥–∞–Ω–∏–µ –ø–æ {subject} –¥–æ–±–∞–≤–ª–µ–Ω–æ!', reply_markup=main_menu())
    except Exception as e:
        bot.send_message(message.chat.id, f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è: {e}')


TOKEN = '7621511398:AAFNKXjit_zuUPkUdYaZYqFHu2mRg2NpebU'
bot = telebot.TeleBot(TOKEN)


@bot.message_handler(commands=['start'])
def handle_start(message):
    try:
        bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —à–∫–æ–ª—å–Ω–∏–∫–æ–≤!', reply_markup=main_menu())
    except Exception as e:
        bot.send_message(message.chat.id, f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}')


@bot.message_handler(content_types=['text'])
def handle_text(message):
    try:
        text = message.text.strip()
        if not text:
            bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!', reply_markup=main_menu())
            return

        commands = {
            'üìö –î/–ó üìö': handle_homework,
            '‚úç –î–µ–º–æ ‚úç': get_demo,
            'üïí –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ üïí': handle_schedule,
            '‚ûï –î–æ–±–∞–≤–∏—Ç—å ‚ûï': handle_add
        }

        if text in commands:
            bot.register_next_step_handler(message, lambda msg: commands[text](bot, msg))
        else:
            bot.send_message(message.chat.id, '–ù–µ –ø–æ–Ω–∏–º–∞—é –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏.', reply_markup=main_menu())
    except Exception as e:
        bot.send_message(message.chat.id, f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}')


if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    while True:
        try:
            bot.polling(non_stop=True, interval=1)
        except Exception:
            pass

import telebot
from telebot import types
from controllers import handle_homework, handle_demo, handle_schedule, main_menu
from models import get_subjects, get_days, get_content_types
from database import save_homework, save_demo, save_schedule

import os

bot = telebot.TeleBot(os.getenv("TG_TOKEN"))

def create_keyboard(items):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for item in items:
        keyboard.add(types.KeyboardButton(item))
    return keyboard

def handle_add(bot, message):
    keyboard = create_keyboard(get_content_types())
    msg = bot.send_message(message.chat.id, "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å?", reply_markup=keyboard)
    bot.register_next_step_handler(msg, select_subject_or_day, bot)

def select_subject_or_day(message, bot):
    content_type = message.text.strip()
    if content_type == "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ":
        keyboard = create_keyboard(get_days())
        msg = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å:", reply_markup=keyboard)
        bot.register_next_step_handler(msg, lambda m: handle_schedule_day(m, bot))
    else:
        keyboard = create_keyboard(get_subjects())
        msg = bot.send_message(message.chat.id, f"–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è {content_type}:", reply_markup=keyboard)
        bot.register_next_step_handler(msg, lambda m: handle_subject(m, bot, content_type))

def handle_subject(message, bot, content_type):
    subject = message.text.strip()
    if subject in get_subjects():
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ:", reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(msg, lambda m: save_task(m, bot, subject, content_type))
    else:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç", reply_markup=main_menu())

def handle_schedule_day(message, bot):
    day = message.text.strip()
    if day in get_days():
        keyboard = create_keyboard(get_subjects())
        msg = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç:", reply_markup=keyboard)
        bot.register_next_step_handler(msg, lambda m: handle_schedule_subject(m, bot, day))
    else:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –¥–µ–Ω—å", reply_markup=main_menu())

def handle_schedule_subject(message, bot, day):
    subject = message.text.strip()
    if subject in get_subjects():
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 9:00-9:45):", reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(msg, lambda m: save_schedule_time(m, bot, day, subject))
    else:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç", reply_markup=main_menu())

def save_task(message, bot, subject, content_type):
    task = message.text.strip()
    try:
        if content_type == "–î–ó":
            msg = bot.send_message(message.chat.id, 
                                 "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Å–¥–∞—á–∏ (—Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú):", 
                                 reply_markup=types.ReplyKeyboardRemove())
            bot.register_next_step_handler(msg, save_homework_with_date, 
                                         bot, subject, task)
        elif content_type == "–î–µ–º–æ":
            msg = bot.send_message(message.chat.id,
                                 "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –º–æ–¥—É–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã (—Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú):",
                                 reply_markup=types.ReplyKeyboardRemove())
            bot.register_next_step_handler(msg, lambda m: save_demo_with_date(m, bot, subject, task))
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {e}", 
                        reply_markup=main_menu())

def save_homework_with_date(message, bot, subject, task):
    try:
        due_date = message.text.strip()
        if len(due_date.split('.')) != 2:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã")
            
        day, month = map(int, due_date.split('.'))
        if not (1 <= day <= 31 and 1 <= month <= 12):
            raise ValueError("–ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞")
            
        save_homework(subject, task, due_date)
        bot.send_message(message.chat.id, 
                        f"–ó–∞–¥–∞–Ω–∏–µ –ø–æ {subject} –¥–æ–±–∞–≤–ª–µ–Ω–æ!\n"
                        f"–°—Ä–æ–∫ —Å–¥–∞—á–∏: {due_date}", 
                        reply_markup=main_menu())
    except Exception as e:
        bot.send_message(message.chat.id, 
                        "–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú", 
                        reply_markup=main_menu())

def save_schedule_time(message, bot, day, subject):
    time = message.text.strip()
    try:
        save_schedule(day, subject, time)
        bot.send_message(message.chat.id, f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è {subject} –≤ {day} –¥–æ–±–∞–≤–ª–µ–Ω–æ!", reply_markup=main_menu())
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {e}", reply_markup=main_menu())

def save_demo_with_date(message, bot, subject, task):
    try:
        due_date = message.text.strip()
        if len(due_date.split('.')) != 2:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã")
            
        day, month = map(int, due_date.split('.'))
        if not (1 <= day <= 31 and 1 <= month <= 12):
            raise ValueError("–ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞")
            
        task_with_date = f"{task} (–ú–æ–¥—É–ª—å–Ω–∞—è: {due_date})"
        save_demo(subject, task_with_date)
        bot.send_message(message.chat.id, 
                        f"–î–µ–º–æ –∑–∞–¥–∞–Ω–∏–µ –ø–æ {subject} –¥–æ–±–∞–≤–ª–µ–Ω–æ!\n"
                        f"–î–∞—Ç–∞ –º–æ–¥—É–ª—å–Ω–æ–π: {due_date}", 
                        reply_markup=main_menu())
    except Exception as e:
        bot.send_message(message.chat.id, 
                        "–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú", 
                        reply_markup=main_menu())

@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —à–∫–æ–ª—å–Ω–∏–∫–æ–≤!', reply_markup=main_menu())

@bot.message_handler(content_types=['text'])
def handle_text(message):
    text = message.text.strip()
    if text == 'üìö –î/–ó üìö':
        handle_homework(bot, message)
    elif text == '‚úç –î–µ–º–æ ‚úç':
        handle_demo(bot, message)
    elif text == 'üïí –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ üïí':
        handle_schedule(bot, message)
    elif text == '‚ûï –î–æ–±–∞–≤–∏—Ç—å ‚ûï':
        handle_add(bot, message)
    else:
        bot.send_message(message.chat.id, '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é', reply_markup=main_menu())

if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    while True:
        try:
            bot.polling(non_stop=True, interval=1)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞: {e}")
            continue
